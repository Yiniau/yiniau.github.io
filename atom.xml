<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yiniau&#39;s blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-05-23T15:56:06.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>yiniau</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/05/23/hello-world/"/>
    <id>http://yoursite.com/2017/05/23/hello-world/</id>
    <published>2017-05-23T15:56:06.000Z</published>
    <updated>2017-05-23T15:56:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2017/04/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/demo_3/"/>
    <id>http://yoursite.com/2017/04/06/设计模式/demo_3/</id>
    <published>2017-04-06T12:30:22.000Z</published>
    <updated>2017-04-06T13:15:03.000Z</updated>
    
    <content type="html"><![CDATA[/* globals args */

const log = type => ((target, name, descriptor) => {
  const method = descriptor.value;
  descriptor.value = (...args) => {
    console.info(`(${type}) 正在执行: ${name}(${args}) = ?`);
    let ret;
    try {
      ret = method.apply(target, args);
      console.info(`(${type}) 成功 : ${name}(${args}) => ${ret}`);
    } catch (error) {
      console.error(`(${type}) 失败: ${name}(${args}) => ${error}`);
    }
    return ret;
  };
});

class IronMan {
  @log('IronMan 自检阶段')
  check() {
    return '检查完毕';
  }
  @log('IronMan 攻击阶段')
  attack() {
    return '击倒敌人';
  }
  @log('IronMan 机体报错')
  error() {
    throw 'Something is wrong!';
  }
}

var tony = new IronMan();
tony.check();
tony.attack();
tony.error();
]]></content>
    
    <summary type="html">
    
      /* globals args */

const log = type =&gt; ((target, name, descriptor) =&gt; {
  const method = descriptor.value;
  descriptor.value = (...args) =
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2017/04/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/decorator%20%7C%20%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F%20#3/"/>
    <id>http://yoursite.com/2017/04/06/设计模式/decorator | 装饰者模式 #3/</id>
    <published>2017-04-06T12:28:13.000Z</published>
    <updated>2017-04-11T08:10:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="decorator-装饰者模式-3"><a href="#decorator-装饰者模式-3" class="headerlink" title="decorator | 装饰者模式 #3"></a>decorator | 装饰者模式 #3</h1><hr>
<h2 id="经典实现：Logger"><a href="#经典实现：Logger" class="headerlink" title="经典实现：Logger"></a>经典实现：Logger</h2><p>AOP 的经典应用就是 <strong>日志系统</strong> 了，那么我们也用 <code>ES7</code> 的语法给钢铁侠打造一个日志系统吧。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/* globals args */</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> log = <span class="function"><span class="params">type</span> =&gt;</span> (<span class="function">(<span class="params">target, name, descriptor</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">const</span> method = descriptor.value;</div><div class="line">  descriptor.value = <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.info(<span class="string">`(<span class="subst">$&#123;type&#125;</span>) 正在执行: <span class="subst">$&#123;name&#125;</span>(<span class="subst">$&#123;args&#125;</span>) = ?`</span>);</div><div class="line">    <span class="keyword">let</span> ret;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      ret = method.apply(target, args);</div><div class="line">      <span class="built_in">console</span>.info(<span class="string">`(<span class="subst">$&#123;type&#125;</span>) 成功 : <span class="subst">$&#123;name&#125;</span>(<span class="subst">$&#123;args&#125;</span>) =&gt; <span class="subst">$&#123;ret&#125;</span>`</span>);</div><div class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</div><div class="line">      <span class="built_in">console</span>.error(<span class="string">`(<span class="subst">$&#123;type&#125;</span>) 失败: <span class="subst">$&#123;name&#125;</span>(<span class="subst">$&#123;args&#125;</span>) =&gt; <span class="subst">$&#123;error&#125;</span>`</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">  &#125;;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">IronMan</span> </span>&#123;</div><div class="line">  @log(<span class="string">'IronMan 自检阶段'</span>)</div><div class="line">  check() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">'检查完毕'</span>;</div><div class="line">  &#125;</div><div class="line">  @log(<span class="string">'IronMan 攻击阶段'</span>)</div><div class="line">  attack() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">'击倒敌人'</span>;</div><div class="line">  &#125;</div><div class="line">  @log(<span class="string">'IronMan 机体报错'</span>)</div><div class="line">  error() &#123;</div><div class="line">    <span class="keyword">throw</span> <span class="string">'Something is wrong!'</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> tony = <span class="keyword">new</span> IronMan();</div><div class="line">tony.check();</div><div class="line">tony.attack();</div><div class="line">tony.error();</div></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&gt; (IronMan 自检阶段) 正在执行: check() = ?</div><div class="line">&gt; (IronMan 自检阶段) 成功 : check() =&gt; 检查完毕</div><div class="line">&gt; (IronMan 攻击阶段) 正在执行: attack() = ?</div><div class="line">&gt; (IronMan 攻击阶段) 成功 : attack() =&gt; 击倒敌人</div><div class="line">&gt; (IronMan 机体报错) 正在执行: error() = ?</div><div class="line">&gt; (IronMan 机体报错) 失败: error() =&gt; Something is wrong!</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;decorator-装饰者模式-3&quot;&gt;&lt;a href=&quot;#decorator-装饰者模式-3&quot; class=&quot;headerlink&quot; title=&quot;decorator | 装饰者模式 #3&quot;&gt;&lt;/a&gt;decorator | 装饰者模式 #3&lt;/h1&gt;&lt;hr&gt;
&lt;h
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2017/04/05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/decorator%20%7C%20%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F%20#2/"/>
    <id>http://yoursite.com/2017/04/05/设计模式/decorator | 装饰者模式 #2/</id>
    <published>2017-04-05T13:27:16.000Z</published>
    <updated>2017-04-06T13:19:42.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="decorator-装饰着模式-2"><a href="#decorator-装饰着模式-2" class="headerlink" title="decorator | 装饰着模式 #2"></a>decorator | 装饰着模式 #2</h1><hr>
<h2 id="装饰模式的区分"><a href="#装饰模式的区分" class="headerlink" title="装饰模式的区分"></a>装饰模式的区分</h2><p><a href="http://blog.csdn.net/zhshulin/article/details/38665187" target="_blank" rel="external">装饰模式</a> 有两种：<strong>纯粹的装饰模式</strong> 和 <strong>半透明的装饰模式</strong>。</p>
<p>在 #1 中所示的是纯粹的装饰模式，它并不增加对原有类的接口。</p>
<p>对类使用，为类增加方法的装饰者函数属于 <strong>半透明的装饰者模式</strong> 。</p>
<h3 id="demo-2-对类的修饰，增加飞行模式"><a href="#demo-2-对类的修饰，增加飞行模式" class="headerlink" title="demo_2 对类的修饰，增加飞行模式"></a>demo_2 对类的修饰，增加飞行模式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// decorator</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addFly</span>(<span class="params">canFly</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">target</span>) </span>&#123;</div><div class="line">    target.canFly = canFly;</div><div class="line">    <span class="keyword">let</span> extra = canFly ? <span class="string">'(技能加成:飞行能力)'</span> : <span class="string">''</span>;</div><div class="line">    <span class="keyword">let</span> method = target.prototype.toString;</div><div class="line">    target.prototype.toString = <span class="function">(<span class="params">...args</span>)=&gt;</span>&#123;</div><div class="line">      <span class="keyword">return</span> method.apply(target.prototype, args) + extra;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@addFly(<span class="literal">true</span>)</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Man</span></span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(def = 2, atk = 3, hp = 3)&#123;</div><div class="line">    <span class="keyword">this</span>.init(def, atk, hp);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  @decorateArmour</div><div class="line">  init(def, atk, hp)&#123;</div><div class="line">    <span class="keyword">this</span>.def = def; <span class="comment">// 防御值</span></div><div class="line">    <span class="keyword">this</span>.atk = atk;  <span class="comment">// 攻击力</span></div><div class="line">    <span class="keyword">this</span>.hp = hp;  <span class="comment">// 血量</span></div><div class="line">  &#125;</div><div class="line">  ...</div><div class="line">&#125;</div><div class="line">...</div><div class="line"></div><div class="line">console.log(<span class="string">`当前状态 ===&gt; <span class="subst">$&#123;tony&#125;</span>`</span>);</div><div class="line"><span class="comment">// 输出：当前状态 ===&gt; 防御力:102,攻击力:3,血量:3(技能加成:飞行能力)</span></div></pre></td></tr></table></figure>
<p>作用在方法上的 <code>decorator</code> 接收的第一个参数( <code>target</code> )是类的 <code>prototype</code></p>
<p>如果把一个 <code>decorator</code> 作用到类上，则它的第一个参数 <code>target</code> 是 类本身。<br>（参考 <a href="http://www.liuhaihua.cn/archives/115548.html" target="_blank" rel="external">Decorators in ES7</a> ）</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;decorator-装饰着模式-2&quot;&gt;&lt;a href=&quot;#decorator-装饰着模式-2&quot; class=&quot;headerlink&quot; title=&quot;decorator | 装饰着模式 #2&quot;&gt;&lt;/a&gt;decorator | 装饰着模式 #2&lt;/h1&gt;&lt;hr&gt;
&lt;h
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2017/04/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/demo_1/"/>
    <id>http://yoursite.com/2017/04/02/设计模式/demo_1/</id>
    <published>2017-04-02T07:08:59.000Z</published>
    <updated>2017-04-05T14:21:13.000Z</updated>
    
    <content type="html"><![CDATA[/*
 eslint Fatal:0
 */

function decorateArmour(target, key, descriptor) {
  const method = descriptor.value;
  const moreDef = 100;
  const des = descriptor;
  let ret;
  des.value = (...args) => {
    args[0] += moreDef;
    ret = method.apply(target, args);
    return ret;
  };
  return descriptor;
}
class Man {
  constructor(def = 2, atk = 3, hp = 3) {
    this.init(def, atk, hp);
  }

  @decorateArmour
  init(def, atk, hp) {
    this.def = def; // 防御值
    this.atk = atk;  // 攻击力
    this.hp = hp;  // 血量
  }

  toString() {
    return `防御力:${this.def} 攻击力:${this.atk} 生命值:${this.hp}`;
  }
}

const tony = new Man();

console.log(`当前状态 ===> ${tony}`);
]]></content>
    
    <summary type="html">
    
      /*
 eslint Fatal:0
 */

function decorateArmour(target, key, descriptor) {
  const method = descriptor.value;
  const moreDef = 100;
  const
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2017/04/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/decorator%20%7C%20%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F%20#1/"/>
    <id>http://yoursite.com/2017/04/02/设计模式/decorator | 装饰者模式 #1/</id>
    <published>2017-04-02T05:04:22.000Z</published>
    <updated>2017-04-06T12:28:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="decorator-装饰者模式-1"><a href="#decorator-装饰者模式-1" class="headerlink" title="decorator | 装饰者模式 #1"></a>decorator | 装饰者模式 #1</h1><hr>
<p><code>装饰者模式</code> 从属于 <code>包装模式 (Wrapper Pattern)</code><br>通过包装函数增强方法或类的功能但不改变接口，这一实现称为<code>装饰者模式</code>。</p>
<p><code>装饰者模式</code> 经典的应用是 <code>AOP (Aspect Oriented Programing 面向切面编程)</code></p>
<blockquote>
<p><code>AOP</code> 可参考 <code>spring aop</code></p>
<p><code>AOP</code> 适合于那些具有横切逻辑的应用：如性能监测，访问控制，事务管理、缓存、对象池管理以及日志记录。<code>AOP</code> 将这些分散在各个业务逻辑中的代码通过横向切割的方式抽取到一个独立的模块中。<code>AOP</code> 实现的关键就在于 <code>AOP</code> 框架自动创建的 <code>AOP</code> 代理，<code>AOP</code> 代理则可分为静态代理和动态代理两大类，其中静态代理是指使用 <code>AOP</code> 框架提供的命令进行编译，从而在编译阶段就可生成 <code>AOP</code> 代理类，因此也称为编译时增强；而动态代理则在运行时借助于 JDK 动态代理、CGLIB 等在内存中“临时”生成 <code>AOP</code> 动态代理类，因此也被称为运行时增强。<br>代理对象的方法 = 增强处理 + 被代理对象的方法<br><code>Spring AOP</code> 则采用运行时生成 <code>AOP</code> 代理类，因此无需使用特定编译器进行处理。由于 <code>Spring AOP</code> 需要在每次运行时生成 <code>AOP</code> 代理，因此性能略差一些。<br> <a href="http://haidaoqi3630.iteye.com/blog/2172845" target="_blank" rel="external">原文链接</a></p>
</blockquote>
<h2 id="es7-decorator-使用"><a href="#es7-decorator-使用" class="headerlink" title="es7 decorator 使用"></a>es7 decorator 使用</h2><p>参考 <strong>淘宝前端团队(FED)</strong> <em><a href="http://taobaofed.org/blog/2015/11/16/es7-decorator/" target="_blank" rel="external">link</a></em> 的例子，通过对一个 <code>man</code> 类进行增强来理解 <code>decorator</code> 的逻辑。</p>
<ul>
<li>创建 <code>Man</code> 类，<code>防御力(Defense)</code> 为2，<code>攻击力(Attack)</code> 为3，<code>生命值(Health)</code> 为3。</li>
<li>装备盔甲，防御力提升100。</li>
<li>装备光束手套，攻击力提升50。</li>
<li>增加飞行能力。</li>
</ul>
<h2 id="demo-1-对方法的装饰"><a href="#demo-1-对方法的装饰" class="headerlink" title="demo_1 对方法的装饰"></a>demo_1 对方法的装饰</h2><p>创建Man类</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Man</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(def = 2, atk = 3, hp = 3) &#123;</div><div class="line">    <span class="keyword">this</span>.init(def, atk, hp);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  init(def, atk, hp) &#123;</div><div class="line">    <span class="keyword">this</span>.def = def; <span class="comment">// 防御值</span></div><div class="line">    <span class="keyword">this</span>.atk = atk;  <span class="comment">// 攻击力</span></div><div class="line">    <span class="keyword">this</span>.hp = hp;  <span class="comment">// 血量</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  toString() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">`防御力:<span class="subst">$&#123;<span class="keyword">this</span>.def&#125;</span> 攻击力:<span class="subst">$&#123;<span class="keyword">this</span>.atk&#125;</span> 生命值:<span class="subst">$&#123;<span class="keyword">this</span>.hp&#125;</span>`</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>测试</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> tony = <span class="keyword">new</span> Man(<span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">`当前状态 ===&gt; <span class="subst">$&#123;tony.toString()&#125;</span>`</span>);</div><div class="line"><span class="comment">// 当前状态 ===&gt; 防御力:2 攻击力:3 生命值:3</span></div></pre></td></tr></table></figure>
<p>创建装饰方法</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// decorator</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">decorateArmour</span>(<span class="params">target, key, descriptor</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> method = descriptor.value; <span class="comment">// 源方法代码块</span></div><div class="line">  <span class="keyword">let</span> moreDef = <span class="number">100</span>; <span class="comment">// 增加的防御力</span></div><div class="line">  <span class="keyword">let</span> ret;</div><div class="line">  descriptor.value = <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</div><div class="line">    args[<span class="number">0</span>] += moreDef;</div><div class="line">    ret = method.apply(target, args); <span class="comment">// 绑定this</span></div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> descriptor;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>装饰</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Man</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(def = 2, atk = 3, hp = 3) &#123;</div><div class="line">    <span class="keyword">this</span>.init(def, atk, hp);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  @decorateArmour</div><div class="line">  init(def, atk, hp) &#123;</div><div class="line">    <span class="keyword">this</span>.def = def; <span class="comment">// 防御值</span></div><div class="line">    <span class="keyword">this</span>.atk = atk;  <span class="comment">// 攻击力</span></div><div class="line">    <span class="keyword">this</span>.hp = hp;  <span class="comment">// 血量</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  toString() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">`防御力:<span class="subst">$&#123;<span class="keyword">this</span>.def&#125;</span> 攻击力:<span class="subst">$&#123;<span class="keyword">this</span>.atk&#125;</span> 生命值:<span class="subst">$&#123;<span class="keyword">this</span>.hp&#125;</span>`</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>测试</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&gt; babel ./设计模式/demo_1.js --out-dir ./dist</div><div class="line">&gt; node ./dist/设计模式/demo_1.js</div><div class="line">当前状态 ===&gt; 防御力:102 攻击力:3 生命值:3</div></pre></td></tr></table></figure>
<h2 id="babel-实现"><a href="#babel-实现" class="headerlink" title="babel 实现"></a>babel 实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">_applyDecoratedDescriptor</span>(<span class="params">target, property, decorators, descriptor, context</span>) </span>&#123; <span class="comment">// 这里的descriptor在babel实现中为原始对象属性的描述符</span></div><div class="line">  <span class="keyword">var</span> desc = &#123;&#125;; <span class="comment">// 创建空对象</span></div><div class="line">  <span class="built_in">Object</span>[<span class="string">'ke'</span> + <span class="string">'ys'</span>](descriptor).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123; <span class="comment">// 通过object的keys方法遍历属性</span></div><div class="line">    desc[key] = descriptor[key]; <span class="comment">// 将descriptor的属性存入desc对象</span></div><div class="line">  &#125;);                            <span class="comment">// (猜测是为了避免对函数属性的直接操作)</span></div><div class="line">  desc.enumerable = !!desc.enumerable; <span class="comment">// 双感叹转换成boolean值(一般用于判断是否存在)</span></div><div class="line">  desc.configurable = !!desc.configurable;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (<span class="string">'value'</span> <span class="keyword">in</span> desc || desc.initializer) &#123; <span class="comment">// 若desc中存在函数体或initializer则设置writerbale为true</span></div><div class="line">    desc.writable = <span class="literal">true</span>; <span class="comment">// writeable的默认值</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  desc = decorators.slice().reverse().reduce(<span class="function"><span class="keyword">function</span>(<span class="params">desc, decorator</span>) </span>&#123; <span class="comment">// 通过slice复制一个数组(浅复制) reverse 反向排列数组，decorators是包含一系列decorator的数组(有先后顺序)</span></div><div class="line">    <span class="keyword">return</span> decorator(target, property, desc) || desc; <span class="comment">// 应用每个装饰者函数,并将desc当作下一个callback的第一个参数</span></div><div class="line">  &#125;, desc);</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (context &amp;&amp; desc.initializer !== <span class="keyword">void</span> <span class="number">0</span>) &#123;</div><div class="line">    desc.value = desc.initializer ? desc.initializer.call(context) : <span class="keyword">void</span> <span class="number">0</span>; <span class="comment">// void表示运算表达式但放弃返回值, 这里效果与undefended效果相同</span></div><div class="line">    desc.initializer = <span class="literal">undefined</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (desc.initializer === <span class="keyword">void</span> <span class="number">0</span>) &#123;</div><div class="line">    <span class="built_in">Object</span>[<span class="string">'define'</span> + <span class="string">'Property'</span>](target, property, desc); <span class="comment">// Object.defineProperty()</span></div><div class="line">    desc = <span class="literal">null</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> desc;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 此方法会在创建对象前使用</span></div><div class="line"><span class="comment">// e.g.</span></div><div class="line">_createClass(Man, [&#123;</div><div class="line">  <span class="attr">key</span>: <span class="string">"init"</span>,</div><div class="line">  <span class="attr">value</span>: <span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params">def, atk, hp</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.def = def; <span class="comment">// 防御值</span></div><div class="line">    <span class="keyword">this</span>.atk = atk; <span class="comment">// 攻击力</span></div><div class="line">    <span class="keyword">this</span>.hp = hp; <span class="comment">// 血量</span></div><div class="line">  &#125;</div><div class="line">&#125;, &#123;</div><div class="line">  <span class="attr">key</span>: <span class="string">"toString"</span>,</div><div class="line">  <span class="attr">value</span>: <span class="function"><span class="keyword">function</span> <span class="title">toString</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"\u9632\u5FA1\u529B:"</span> + <span class="keyword">this</span>.def + <span class="string">" \u653B\u51FB\u529B:"</span> + <span class="keyword">this</span>.atk + <span class="string">" \u751F\u547D\u503C:"</span> + <span class="keyword">this</span>.hp;</div><div class="line">  &#125;</div><div class="line">&#125;]);</div><div class="line"></div><div class="line"><span class="keyword">return</span> Man;</div><div class="line">&#125;(), (_applyDecoratedDescriptor(_class.prototype, <span class="string">"init"</span>, [decorateArmour], <span class="built_in">Object</span>.getOwnPropertyDescriptor(_class.prototype, <span class="string">"init"</span>), _class.prototype)), _class);</div></pre></td></tr></table></figure>
<p>通过阅读 <code>babel</code> 实现可以发现， <code>@decorator</code> 是通过 <code>ES5</code> 中的 <code>Object.defineProperty(obj, props, descriptor)</code> 实现的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;decorator-装饰者模式-1&quot;&gt;&lt;a href=&quot;#decorator-装饰者模式-1&quot; class=&quot;headerlink&quot; title=&quot;decorator | 装饰者模式 #1&quot;&gt;&lt;/a&gt;decorator | 装饰者模式 #1&lt;/h1&gt;&lt;hr&gt;
&lt;p
    
    </summary>
    
    
  </entry>
  
</feed>
