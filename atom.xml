<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yiniau&#39;s blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yiniau.com/"/>
  <updated>2017-05-25T16:46:52.000Z</updated>
  <id>http://yiniau.com/</id>
  
  <author>
    <name>yiniau</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>docker笔记_1</title>
    <link href="http://yiniau.com/2017/05/25/docker%E7%AC%94%E8%AE%B0_1/"/>
    <id>http://yiniau.com/2017/05/25/docker笔记_1/</id>
    <published>2017-05-25T10:42:23.000Z</published>
    <updated>2017-05-25T16:46:52.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="主要参考资料"><a href="#主要参考资料" class="headerlink" title="主要参考资料"></a>主要参考资料</h4><p><a href="https://docs.docker.com/get-started/#container-diagram" target="_blank" rel="external">官方文档</a><br><a href="https://yeasy.gitbooks.io/docker_practice/content/introduction/what.html" target="_blank" rel="external">docker从入门到实践</a></p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>我是用的是mac，所以直接使用<code>brew install docker</code>就能顺利安装</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ docker -v</div><div class="line">$ Docker version 17.03.1-ce, build c6d412e</div></pre></td></tr></table></figure>
<h4 id="先决知识"><a href="#先决知识" class="headerlink" title="先决知识"></a>先决知识</h4><ul>
<li>IP Addresses and Ports        || IP地址和端口</li>
<li>Virtual Machines              || 虚拟机</li>
<li>Editing configuration files   || 编辑配置文件</li>
<li>Basic familiarity with the ideas of code dependencies and building || 基本熟悉代码依赖和构建的思想</li>
<li>Machine resource usage terms, like CPU percentages, RAM use in bytes, etc. || 机器资源使用条款，如CPU百分比，RAM使用字节数等</li>
</ul>
<h4 id="containers-and-images-lt-容器-gt-和-lt-镜像-gt"><a href="#containers-and-images-lt-容器-gt-和-lt-镜像-gt" class="headerlink" title="containers and images || &lt;容器&gt;和&lt;镜像&gt;"></a>containers and images || &lt;容器&gt;和&lt;镜像&gt;</h4><p><strong>image</strong> 镜像是一个轻量级的、独立的、可执行的 package ，包含了所有运行一个程序需要的一切，包含 code,a runtime,libraries,environment variables,and config files。</p>
<blockquote>
<p>我们都知道，操作系统分为内核和用户空间。对于 Linux 而言，内核启动后，会挂载 root 文件系统为其提供用户空间支持。而 Docker 镜像（Image），就相当于是一个 root 文件系统。比如官方镜像 ubuntu:14.04 就包含了完整的一套 Ubuntu 14.04 最小系统的 root 文件系统。</p>
</blockquote>
<p>因为镜像包含操作系统完整的 root 文件系统，其体积往往是庞大的，因此在 Docker 设计时，就充分利用 <a href="https://en.wikipedia.org/wiki/Union_mount" target="_blank" rel="external">Union FS</a> 的技术，将其设计为分层存储的架构。所以严格来说，镜像并非像是一个ISO那样的打包文件，而是一个虚拟的概念。<br>镜像构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。比如，删除前一层文件的操作，实际不是真的删除前一层的文件，而是仅在当前层标记为该文件已删除。在最终容器运行的时候，虽然不会看到这个文件，但是实际上该文件会一直跟随镜像。因此，在构建镜像的时候，需要额外小心，每一层尽量只包含该层需要添加的东西，任何额外的东西应该在该层构建结束前清理掉。</p>
<blockquote>
<p>分层存储的特征还使得镜像的复用、定制变的更为容易。甚至可以用之前构建好的镜像作为基础层，然后进一步添加新的层，以定制自己所需的内容，构建新的镜像。</p>
</blockquote>
<p><strong>container</strong> 容器是<strong>一个</strong>运行时镜像的<strong>实例</strong> - what the images becomes in memory when actully executed.<br>默认情况下，它与主机环境完全隔离，只能访问主机文件和端口（如果配置为这样做）。(端口和文件的访问都需要经过配置)<br>容器运行在主机的内核上，可以说容器的实质是进程，但是与普通进程不同的是容器拥有独立的<a href="https://en.wikipedia.org/wiki/Linux_namespaces" target="_blank" rel="external">命名空间</a>,因此容器可以拥有自己的 root 文件系统、自己的网络配置、自己的进程空间，甚至自己的用户 ID 空间。容器内的进程是运行在一个隔离的环境里，使用起来，就好像是在一个独立于宿主的系统下操作一样。<br>容器与镜像一样也使用了分层储存。<br>每一个容器运行时都是以镜像为基础层，在其上创建一个为容器运行时读写准备的储存层，可以称为<strong>容器储存层</strong><br>当容消亡时容器储存层同样消失，任何保存在容器储存层中的数据都会丢失。<br>按照 <a href="">Docker 最佳实践</a>的要求，容器不应该向其存储层内写入任何数据，容器存储层要保持无状态化。所有的文件写入操作，都应该使用 数据卷（Volume）、或者绑定宿主目录，在这些位置的读写会跳过容器存储层，直接对宿主(或网络存储)发生读写，其性能和稳定性更高。</p>
<h4 id="Containers-与传统虚拟机的比较"><a href="#Containers-与传统虚拟机的比较" class="headerlink" title="Containers 与传统虚拟机的比较"></a>Containers 与传统虚拟机的比较</h4><p><strong>Virtual Machine diagram</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">          |=========|</div><div class="line">          |   VM    |</div><div class="line">|---------|---------|---------|</div><div class="line">|  App A  |  App B  |  App C  |</div><div class="line">|---------|---------|---------|</div><div class="line">|Bins/Libs|Bins/Libs|Bins/Libs|</div><div class="line">|---------|---------|---------|</div><div class="line">| GuestOS | GuestOS | GuestOS |</div><div class="line">|         |=========|         |</div><div class="line">|=============================|</div><div class="line">|          Hypervisor         |</div><div class="line">|-----------------------------|</div><div class="line">|          Host   OS          |</div><div class="line">|-----------------------------|</div><div class="line">|       Infrastructure        |</div><div class="line">|-----------------------------|</div></pre></td></tr></table></figure>
<p><strong>Container diagram</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">        |=============|</div><div class="line">        |  CONTAINER  |</div><div class="line">        |_           _|</div><div class="line">|---------|---------|---------|</div><div class="line">|  App A  |  App B  |  App C  |</div><div class="line">|---------|---------|---------|</div><div class="line">|Bins/Libs|Bins/Libs|Bins/Libs|</div><div class="line">|         |=========|         |</div><div class="line">|=============================|</div><div class="line">|        Docker Engine        |</div><div class="line">|-----------------------------|</div><div class="line">|          Host  OS           |</div><div class="line">|-----------------------------|</div><div class="line">|       Infrastructure        |</div><div class="line">|-----------------------------|</div></pre></td></tr></table></figure>
<p>传统虚拟机技术会虚拟一整套硬件，并在其上跑一个完整的操作系统，之后再运行应用程序<br>而容器内的应用直接运行于宿主机的内核上，容器没有自己的内核,多个容器可以共享一个内核。<br>容器也不进行硬件模拟，因此容器要比虚拟机<strong>轻快</strong>不少。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;主要参考资料&quot;&gt;&lt;a href=&quot;#主要参考资料&quot; class=&quot;headerlink&quot; title=&quot;主要参考资料&quot;&gt;&lt;/a&gt;主要参考资料&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://docs.docker.com/get-started/#containe
    
    </summary>
    
    
      <category term="docker" scheme="http://yiniau.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yiniau.com/2017/05/23/hello-world/"/>
    <id>http://yiniau.com/2017/05/23/hello-world/</id>
    <published>2017-05-23T15:56:06.000Z</published>
    <updated>2017-05-23T15:56:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
